filter {
    if [fileset][module] {
        mutate {
            add_field => {
                "file" => "%{source}"
                "application" => "%{[fileset][module]}"
            }
        }
        mutate { replace => { "source" => "%{[host][name]}" } }
        #if [host] { mutate { add_field => { "source_details" => "%{[host]}" } } }
        #if [host][os][family] { mutate { add_field => { "source_os_family" => "%{[host][os][family]}" } } }
        #if [host][ip] { mutate { add_field => { "source_ip" => "%{[host][ip]}" } } }
        #if [host][mac] {
        #    mutate { add_field => { "source_mac" => "%{[host][mac]}" } }
        #    mutate { uppercase => [ "source_mac" ] }
        #    mutate {
        #        gsub => [
        #            "source_mac", "\:", ""
        #        ]
        #    }
        #}
        if [fields][os_family] {
            mutate { rename => { "[fields][os_family]" => "source_os_family" } }
        } else if [host][os][family] {
            mutate { add_field => { "source_os_family" => "%{[host][os][family]}" } }
        }
        if "snort" in [tags] { mutate { remove_tag => [ "snort" ] } }
        if [fileset][module] == "apache2" {
            if [fileset][name] == "access" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{APACHE_ACCESS_1}",
                            "%{APACHE_ACCESS_2}"
                        ]
                    }
                    tag_on_failure => [ "apache2_access_grok_failure" ]
                    add_field => {
                        "dst_ip" => "%{[source]}"
                        "dst_hostname" => "%{[source]}"
                    }
                }
                date {
                    match => [
                        "time",
                        "dd/MMM/YYYY:H:m:s Z"
                    ]
                    remove_field => [ "time" ]
                }
                useragent {
                    source => "agent"
                    target => "user_agent"
                    remove_field => [ "agent" ]
                }
                dns {
                    resolve => [ "dst_ip" ]
                    action => "replace"
                    failed_cache_size => "100000"
                    failed_cache_ttl => "900"
                    hit_cache_size => "100000"
                    hit_cache_ttl => "900"
                    nameserver => [ "127.0.0.1" ]
                }
            } else if [fileset][name] == "error" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{APACHE_ERROR_1}",
                            "%{APACHE_ERROR_2}"
                        ]
                    }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "apache2_error_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "EEE MMM dd H:m:s YYYY",
                        "EEE MMM dd H:m:s.SSSSSS YYYY"
                    ]
                    remove_field => [ "timestamp" ]
                }
            }
        }
        if [fileset][module] == "auditd" {
            if [fileset][name] == "log" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{AUDITD_1}",
                            "%{AUDITD_2}",
                            "%{AUDITD_3}",
                            "%{AUDITD_4}",
                            "%{AUDITD_5}"
                        ]
                    }
                    tag_on_failure => [ "auditd_log_grok_failure" ]
                }
                kv {
                    prefix => "log_"
                    source => "kv"
                    field_split => "\s+"
                    value_split => "="
                    remove_field => [ "kv" ]
                }
                kv {
                    prefix => "log_"
                    source => "sub_kv"
                    field_split => "\s+"
                    value_split => "="
                    remove_field => [ "sub_kv" ]
                }
                date {
                    match => [
                        "epoch",
                        "UNIX"
                    ]
                    remove_field => [ "epoch" ]
                }
                if [log_addr] !~ /^(?:\?)$/ { mutate { rename => { "log_addr" => "src_ip" } } }
                if [log_hostname] !~ /^(?:\?)$/ {
                    if [log_hostname] !~ /^(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?)|(?:(?<![0-9])(?:(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5]))(?![0-9])))$/ {
                        mutate { rename => { "log_hostname" => "src_hostname" } }
                    } else if [log_hostname] =~ /^(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?)|(?:(?<![0-9])(?:(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5]))(?![0-9])))$/ {
                        if [src_ip] {
                            if [src_ip] =~ /^(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?)|(?:(?<![0-9])(?:(?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5]))(?![0-9])))$/ {
                                mutate { add_field => { "src_hostname" => "%{[src_ip]}" } }
                                dns {
                                    reverse => [ "src_hostname" ]
                                    action => "replace"
                                    failed_cache_size => "100000"
                                    failed_cache_ttl => "900"
                                    hit_cache_size => "100000"
                                    hit_cache_ttl => "900"
                                    nameserver => [ "127.0.0.1" ]
                                }
                            }
                        }
                    }
                }
                if [log_laddr] !~ /^(?:\?)$/ { mutate { rename => { "log_laddr" => "dst_ip" } } }
                if [log_lport] !~ /^(?:\?)$/ { mutate { rename => { "log_lport" => "dst_port" } } }
                if [log_rport] !~ /^(?:\?)$/ { mutate { rename => { "log_rport" => "src_port" } } }
                if [log_exe] { mutate { replace => { "application" => "%{[log_exe]}" } } }
            }
        }
        if [fileset][module] == "elasticsearch" {
            if [fileset][name] == "audit" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => "%{ES_AUDIT}" }
                    tag_on_failure => [ "es_audit_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "ISO8601"
                    ]
                }
            } else if [fileset][name] == "deprecation" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => "%{ES_DEPRECIATION}" }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "es_depreciation_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "ISO8601"
                    ]
                }
            } else if [fileset][name] == "gc" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{ES_GC_1}",
                            "%{ES_GC_2}",
                            "%{ES_GC_3}",
                            "%{ES_GC_4}",
                            "%{ES_GC_5}",
                            "%{ES_GC_6}"
                        ]
                    }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "es_gc_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "ISO8601"
                    ]
                }
                mutate { split => { "es_gc_tags" => "," } }
            } else if [fileset][name] == "server" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => "%{ES_SERVER}" }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "es_server_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "ISO8601"
                    ]
                }
            } else if [fileset][name] == "slowlog" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => "%{ES_SLOWLOG}" }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "es_slowlog_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "ISO8601"
                    ]
                }
            }
        }
        if [fileset][module] == "iis" {
            if [fileset][name] == "access" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{IIS_ACCESS_1}",
                            "%{IIS_ACCESS_2}",
                            "%{IIS_ACCESS_3}"
                        ]
                    }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "iis_access_grok_failure" ]
                }
                date {
                    match => [
                        "time",
                        "yyyy-MM-dd HH:mm:ss"
                    ]
                    remove_field => [ "time" ]
                }
                useragent {
                    source => "agent"
                    target => "user_agent"
                    remove_field => [ "agent" ]
                }
            } else if [fileset][name] == "error" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => "%{IIS_ERROR}" }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "iis_error_grok_failure" ]
                }
                date {
                    match => [
                        "time",
                        "yyyy-MM-dd HH:mm:ss"
                    ]
                    remove_field => [ "time" ]
                }
            }
        }
        if [fileset][module] == "logstash" {
            if [fileset][name] == "log" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => [ "%{LOGSTASH}" ] }
                    tag_on_failure => [ "logstash_log_grok_failure" ]
                    overwrite => [ "message" ]
                }
                date {
                    match => [
                        "timestamp",
                        "ISO8601"
                    ]
                }
            } else if [fileset][name] == "slowlog" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => [ "%{LOGSTASH}" ] }
                    tag_on_failure => [ "logstash_slowlog_grok_failure" ]
                    overwrite => [ "message" ]
                }
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "module" => [ "%{LOGSTASH_SLOWLOG_MODULE}" ] }
                    tag_on_failure => [ "logstash_slowlog_module_grok_failure" ]
                }
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => [ "%{LOGSTASH_SLOWLOG_MESSAGE}" ] }
                    tag_on_failure => [ "logstash_slowlog_module_message_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "ISO8601"
                    ]
                }
            }
        }
        if [fileset][module] == "mysql" {
            if [fileset][name] == "error" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{MYSQL_ERROR_1}",
                            "%{MYSQL_ERROR_2}",
                            "%{MYSQL_ERROR_3}"
                        ]
                    }
                    tag_on_failure => [ "mysql_error_grok_failure" ]
                    overwrite => [ "message" ]
                }
                if [timestamp] {
                    mutate {
                        gsub => [
                            "timestamp", "(?:\s+){2,}", " "
                        ]
                    }
                    date {
                        match => [
                            "timestamp",
                            "ISO8601",
                            "yyMMdd H:mm:ss",
                            "yyMMdd HH:mm:ss"
                        ]
                        remove_field => [
                            "timestamp",
                            "date",
                            "time"
                        ]
                    }
                }
            } else if [fileset][name] == "slowlog" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => [ "%{MYSQL_SLOWLOG}" ] }
                    tag_on_failure => [ "mysql_slowlog_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "UNIX"
                    ]
                }
                mutate {
                    gsub => [
                        "query", "\n# Time: [0-9]+ [0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9]+)?$", ""
                    ]
                }
            }
        }
        if [fileset][module] == "nginx" {
            if [fileset][name] == "access" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => [ "%{NGINX_ACCESS}" ] }
                    tag_on_failure => [ "nginx_access_grok_failure" ]
                    add_field => {
                        "dst_ip" => "%{[source]}"
                        "dst_hostname" => "%{[source]}"
                    }
                }
                date {
                    match => [
                        "time",
                        "dd/MMM/YYYY:H:m:s Z"
                    ]
                    remove_field => [ "time" ]
                }
                useragent {
                    source => "agent"
                    target => "user_agent"
                    remove_field => [ "agent" ]
                }
                dns {
                    resolve => [ "dst_ip" ]
                    action => "replace"
                    failed_cache_size => "100000"
                    failed_cache_ttl => "900"
                    hit_cache_size => "100000"
                    hit_cache_ttl => "900"
                    nameserver => [ "127.0.0.1" ]
                }
            } else if [fileset][name] == "error" {
                grok {
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => { "message" => [ "%{NGINX_ERROR}" ] }
                    overwrite => [ "message" ]
                    tag_on_failure => [ "nginx_error_grok_failure" ]
                }
                date {
                    match => [
                        "time",
                        "YYYY/MM/dd H:m:s"
                    ]
                    remove_field => [ "time" ]
                }
            }
        }
        if [fileset][module] == "system" {
            if [fileset][name] == "auth" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{SYSTEM_AUTH_1}",
                            "%{SYSTEM_AUTH_2}",
                            "%{SYSTEM_AUTH_3}",
                            "%{SYSTEM_AUTH_4}",
                            "%{SYSTEM_AUTH_5}",
                            "%{SYSTEM_AUTH_6}",
                            "%{SYSTEM_AUTH_7}"
                        ]
                    }
                    overwrite => [
                        "message",
                        "application"
                    ]
                    tag_on_failure => [ "system_auth_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "MMM  d HH:mm:ss",
                        "MMM dd HH:mm:ss"
                    ]
                    remove_field => [ "timestamp" ]
                }
                if [ssh_event] { mutate { replace => { "application" => "sshd" } } }
            } else if [fileset][name] == "syslog" {
                grok {                   
                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                    match => {
                        "message" => [
                            "%{SYSTEM_SYSLOG_1}",
                            "%{SYSTEM_SYSLOG_2}"
                        ]
                    }
                    overwrite => [
                        "message",
                        "application"
                    ]
                    tag_on_failure => [ "system_syslog_grok_failure" ]
                }
                date {
                    match => [
                        "timestamp",
                        "MMM  d HH:mm:ss",
                        "MMM dd HH:mm:ss"
                    ]
                    remove_field => [ "timestamp" ]
                }
                if [application] == "kernel" {
                    if [message] =~ /^(chain\=)/
                    or [message] =~ /^(iptable\_chain\=)/
                    or [message] =~ /^(IPT\[[A-Z\_\-]{1,10}\]\:)/
                    or [message] =~ /^(IN\=)/ {
                        mutate {
                            gsub => [
                                "message", "= ", "=null ",
                                "message", "IPT\[", "chain=",
                                "message", "\]\:", "",
                                "message", "iptable_chain=", "chain="
                            ]
                        }
                        kv {
                            prefix => "ipt_"
                            source => "message"
                            transform_key => "lowercase"
                            transform_value => "lowercase"
                            exclude_keys => [
                                "iid",
                                "len",
                                "prec",
                                "res",
                                "tos",
                                "ttl",
                                "urgp",
                                "window"
                            ]
                            add_tag => [ "ipt_kv_success" ]
                        }
                        if "ipt_kv_success" in [tags] {
                            mutate {
                                rename => {
                                    "ipt_src" => "src_ip"
                                    "ipt_spt" => "src_port"
                                    "ipt_dst" => "dst_ip"
                                    "ipt_dpt" => "dst_port"
                                    "ipt_in" => "intf_in"
                                    "ipt_out" => "intf_out"
                                }
                                remove_tag => [ "ipt_kv_success" ]
                            }
                            if [ipt_mac] {
                                grok {
                                    patterns_dir => [ "/etc/logstash/conf.d/patterns" ]
                                    match => { "ipt_mac" => "%{NETFILTERMAC}" }
                                    add_tag => [ "mac_grok_success" ]
                                    tag_on_failure => [ "mac_grok_failure" ]
                                }
                                if "mac_grok_success" in [tags] {
                                    mutate {
                                        uppercase => [
                                            "src_mac",
                                            "dst_mac"
                                        ]
                                        remove_tag => [ "mac_grok_success" ]
                                    }
                                    mutate {
                                        gsub => [
                                            "src_mac", "\:", "",
                                            "dst_mac", "\:", ""
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}